**Java Message Service (JMS)**
--------------------------------------
is a Java API that allows applications to create, send, receive, and read messages. 
It enables distributed communication that is loosely coupled, reliable, and asynchronous. 
JMS is part of the Java Platform, Enterprise Edition (Java EE) and provides a standard way to implement messaging within Java applications.

Key Concepts of JMS
Messages: The communication units in JMS, which can be simple text messages or complex objects.
Producers: Applications that create and send messages.
Consumers: Applications that receive and process messages.
Destinations: The locations to which messages are sent and from which they are received. JMS defines two types of destinations:
Queues: Used for point-to-point (P2P) messaging, where each message is delivered to one consumer.
Topics: Used for publish/subscribe (pub/sub) messaging, where each message can be delivered to multiple consumers.
Key Components of JMS
Connection Factory: An object that an application uses to create a connection with the messaging server.
Connections: Represents an active connection to the messaging server.
Sessions: A single-threaded context for producing and consuming messages.
Message Producers: Created by a session to send messages to a destination.
Message Consumers: Created by a session to receive messages from a destination.



Benefits of JMS
Asynchronous Communication: Producers and consumers can work independently, allowing for decoupled and asynchronous communication.
Reliability: Ensures that messages are delivered reliably using features like message persistence and acknowledgment.
Scalability: Supports scalable and distributed systems by decoupling the components.
JMS is widely used in enterprise applications to ensure reliable and efficient communication between different parts of a distributed system.
